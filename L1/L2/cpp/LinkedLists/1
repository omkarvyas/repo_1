#include<iostream>
#include<vector>

using namespace std;

struct ListNode{
    int val;
    ListNode *next;
    ListNode(int x): val(x), next(NULL){}
};



void Print_LL(ListNode *head){

    ListNode *tmp = head;
    int i =0;
    if(head == NULL){
    cout << "Empty List; head pointer is NULL"<<endl;
    return;
    
    }

    while(tmp!=NULL){
    
        cout<<"Node:"<<i<<"val:"<<tmp->val<<endl;
        tmp = tmp->next;
        i++;
    }
}



ListNode * AddNode_Front(ListNode *head, int val){
    
    ListNode *tmp = new ListNode(val);
    if(head == NULL){
    
        return tmp;
    
    }else{
    
        tmp->next=head;
    
    }

return tmp;

}

ListNode *rotate_list(ListNode *head, int k){

    ListNode *cur = new ListNode(-1);
    ListNode *rot_head = NULL;
    ListNode *prev = NULL;
    prev = rot_head = cur;

    cout << "rot_head->val" << rot_head->val <<endl;
    unsigned int count = 0;
    if(head == NULL){
    
        return NULL;
    }
    if(k < 0){
        cout<<"invalid k"<<endl;
        return head;
    }
    cur->next = head;
    cout << "cur->val" << cur->val <<endl;
    while(cur->next != NULL){
        cur = cur->next;
        count++;
    }
    cur->next = rot_head->next;
//    prev = cur;
//    k = k+count;
    cout <<"new k:  "<<k<<endl;
    while(k!=0){
        k--;
        prev = cur;
        cur = cur->next;
        cout<<"cur:  "<<cur->val<<endl;
    }
    cur->next = NULL;
    Print_LL(prev);
    return prev;
}




int main(){

    ListNode * head = NULL;
    ListNode * out_head = NULL;
    int k = 4;

    head = AddNode_Front(head,2);
    head = AddNode_Front(head,1);
    head = AddNode_Front(head,0);
//    head = AddNode_Front(head,10);
    out_head = rotate_list(head,k);
    Print_LL(out_head);
    return 0;
}


